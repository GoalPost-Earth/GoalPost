interface PersonInterface {
  id: ID!
  firstName: String!
  lastName: String!
  name: String!
  photo: String
  phone: String
  email: String
  manual: String
  interests: String
  gender: String
  pronouns: String
  location: String
  guidedBy: [CoreValue!]! @declareRelationship
  createdAt: DateTime!
  updatedAt: DateTime
}

type Person implements PersonInterface @node(labels: ["Person"]) {
  id: ID! @id
  firstName: String!
  lastName: String!
  name: String! @customResolver(requires: "firstName lastName")
  photo: String
  phone: String
  email: String
  manual: String
  interests: String
  gender: String
  pronouns: String
  location: String
  guidedBy: [CoreValue!]! @relationship(type: "GUIDED_BY", direction: OUT)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Member implements PersonInterface @node(labels: ["Member"]) {
  id: ID! @id
  authId: String!
  firstName: String!
  lastName: String!
  name: String! @customResolver(requires: "firstName lastName")
  phone: String
  email: String
  manual: String
  interests: String
  gender: String
  pronouns: String
  location: String

  # Non Inherited Fields
  status: Boolean!
  photo: String
  signupDate: Date!
  avatar: String
  favourites: String
  passions: String
  traits: String
  fieldsOfCare: String
  circles: String

  # Relationships
  connectsToMember: [Member!]!
    @relationship(type: "CONNECTS_TO", direction: OUT)
  guidedBy: [CoreValue!]! @relationship(type: "GUIDED_BY", direction: OUT)
  community: [Community!]! @relationship(type: "BELONGS_TO", direction: OUT)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Area @node {
  id: ID! @id
  name: String!
  region: String!
  state: String!
  distance: Float!
  country: String!
  city: String!
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type CarePoint @node {
  id: ID! @id
  description: String!
  status: String!
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Community @node {
  id: ID! @id
  name: String!
  caresFor: String
  activities: String
  resultsAchieved: String
  status: Boolean!
  location: String

  hasMembers: [Member!]! @relationship(type: "BELONGS_TO", direction: IN)
  relatesToCommunity: [Community!]!
    @relationship(type: "RELATES_TO", direction: OUT)
  hasAccessToResource: [Resource!]!
    @relationship(type: "HAS_ACCESS_TO", direction: OUT)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type CoreValue @node {
  id: ID! @id
  name: String!
  caresFor: String
  whoSupports: String
  alignmentChallenges: String
  alignmentExamples: String
  description: String
  why: String
  guidesPerson: [Person!]! @relationship(type: "GUIDED_BY", direction: IN)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Goal @node {
  id: ID! @id
  name: String!
  type: String!
  description: String!
  caresFor: String
  successMeasures: String
  photo: String
  status: Boolean!
  location: String
  time: String
  motivatesPerson: [Person!]! @relationship(type: "MOTIVATED_BY", direction: IN)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Resource @node {
  id: ID! @id
  name: String!
  description: String
  status: String
  why: String
  location: String
  time: String
  providedByPerson: [Person!]! @relationship(type: "PROVIDES", direction: IN)
  dependsOnResource: [Resource!]!
    @relationship(type: "DEPENDS_ON", direction: OUT)
  appliedToCarePoint: [CarePoint!]!
    @relationship(type: "APPLIED_TO", direction: IN)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

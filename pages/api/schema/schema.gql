interface PersonInterface {
  id: ID!
  firstName: String!
  lastName: String!
  name: String!
  photo: String
  phone: String
  email: String
  pronouns: String
  location: String
  createdAt: DateTime!
  updatedAt: DateTime
}
extend schema @authentication

type Person implements PersonInterface @node {
  id: ID! @id
  authId: String
  firstName: String!
  lastName: String!
  name: String! @customResolver(requires: "firstName lastName")
  photo: String
  phone: String
  email: String
  pronouns: String
  location: String

  # Relationships
  connectedTo: [Person!]! @relationship(type: "CONNECTS_TO", direction: OUT)
  coreValues: [CoreValue!]! @relationship(type: "EMBRACES", direction: OUT)
  providesResources: [Resource!]!
    @relationship(type: "PROVIDES", direction: OUT)
  communities: [Community!]!
    @relationship(type: "MEMBER_OF", direction: OUT, properties: "MemberOf")

  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type MemberOf @relationshipProperties {
  signupDate: Date
  avatar: String
  favourites: String
  passions: String
  traits: String
  fieldsOfCare: String
  interests: String
}

type Area @node {
  id: ID! @id
  name: String!
  region: String!
  state: String!
  distance: Float!
  country: String!
  city: String!
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type CarePoint @node {
  id: ID! @id
  description: String!
  status: String!

  resources: [Resource!]! @relationship(type: "APPLIED_IN", direction: OUT)
  enabledByGoals: [Goal!]! @relationship(type: "ENABLED_BY", direction: OUT)
  caresForGoals: [Goal!]! @relationship(type: "CARES_FOR", direction: IN)

  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Community @node {
  id: ID! @id
  name: String!
  description: String
  why: String
  location: String
  time: String
  activities: String
  resultsAchieved: String
  status: String

  members: [Member!]! @relationship(type: "MEMBER_OF", direction: IN)
  relatedCommunities: [Community!]!
    @relationship(type: "RELATES_TO", direction: OUT)
  resources: [Resource!]! @relationship(type: "HAS_ACCESS_TO", direction: OUT)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type CoreValue @node {
  id: ID! @id
  name: String!
  whoSupports: String
  alignmentChallenges: String
  alignmentExamples: String
  description: String
  why: String
  isEmbracedByMembers: [Member!]! @relationship(type: "EMBRACES", direction: IN)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Goal @node {
  id: ID! @id
  name: String!
  description: String
  successMeasures: String
  photo: String
  activities: String
  status: String!
  location: String
  time: String
  motivatesPeople: [Person!]! @relationship(type: "MOTIVATED_BY", direction: IN)
  createdBy: [Member!]! @relationship(type: "CREATED_BY", direction: OUT)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}

type Resource @node {
  id: ID! @id
  name: String!
  description: String
  status: String!
  why: String
  location: String
  time: String
  providedByPerson: [Person!]! @relationship(type: "PROVIDES", direction: IN)
  dependsOnResources: [Resource!]!
    @relationship(type: "DEPENDS_ON", direction: OUT)
  carePoints: [CarePoint!]! @relationship(type: "APPLIED_TO", direction: IN)
  createdAt: DateTime!
    @timestamp(operations: [CREATE])
    @settable(onCreate: true, onUpdate: false)
  updatedAt: DateTime
    @timestamp(operations: [UPDATE])
    @settable(onCreate: false, onUpdate: true)
}
